import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:go_router/go_router.dart';

class ExpressCallPage extends StatefulWidget {
  @override
  _ExpressCallPageState createState() => _ExpressCallPageState();
}

class _ExpressCallPageState extends State<ExpressCallPage> {
  String _searchQuery = '';
  String _selectedCategory = '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';
  
  final List<String> _categories = [
    '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    '‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
    '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
    '‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
    '‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',
    '‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê',
    '‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          '‡∏™‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Color(0xFF8B4A9F),
        elevation: 0,
        iconTheme: IconThemeData(color: Colors.white),
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {
            if (Navigator.canPop(context)) {
              Navigator.pop(context);
            } else {
              context.go('/');
            }
          },
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Color(0xFF8B4A9F),
              Color(0xFFD577A7),
              Color(0xFFF5C4C4),
            ],
          ),
        ),
        child: SafeArea(
          child: SingleChildScrollView(
            padding: EdgeInsets.all(16.0),
            child: Column(
              children: [
                SizedBox(height: 20),
                
                // Header with icon
                _buildHeader(),
                
                SizedBox(height: 20),
                
                // Search and Filter Section
                _buildSearchAndFilter(),
                
                SizedBox(height: 20),
                
                // Filtered Sections
                ..._buildFilteredSections(),
                
                SizedBox(height: 40),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        children: [
          Icon(
            Icons.phone_in_talk,
            color: Color(0xFF8B4A9F),
            size: 60,
          ),
          SizedBox(height: 12),
          Text(
            '‡∏™‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
            style: TextStyle(
              color: Color(0xFF8B4A9F),
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
          SizedBox(height: 6),
          Text(
            '‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏ó‡∏£‡∏´‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
            style: TextStyle(
              color: Colors.black54,
              fontSize: 14,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchAndFilter() {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        children: [
          // Search Bar
          TextField(
            onChanged: (value) {
              setState(() {
                _searchQuery = value.toLowerCase();
              });
            },
            decoration: InputDecoration(
              hintText: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô...',
              prefixIcon: Icon(
                Icons.search,
                color: Color(0xFF8B4A9F),
              ),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: BorderSide(color: Colors.grey.shade300),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: BorderSide(color: Color(0xFF8B4A9F), width: 2),
              ),
              contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            ),
          ),
          
          SizedBox(height: 16),
          
          // Category Filter
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: _categories.map((category) {
                bool isSelected = _selectedCategory == category;
                return Container(
                  margin: EdgeInsets.only(right: 8),
                  child: FilterChip(
                    label: Text(
                      category,
                      style: TextStyle(
                        color: isSelected ? Colors.white : Color(0xFF8B4A9F),
                        fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                    selected: isSelected,
                    onSelected: (selected) {
                      setState(() {
                        _selectedCategory = category;
                      });
                    },
                    backgroundColor: Colors.white,
                    selectedColor: Color(0xFF8B4A9F),
                    checkmarkColor: Colors.white,
                    side: BorderSide(
                      color: Color(0xFF8B4A9F),
                      width: 1,
                    ),
                  ),
                );
              }).toList(),
            ),
          ),
        ],
      ),
    );
  }

  List<Widget> _buildFilteredSections() {
    List<Widget> sections = [];
    
    // All sections data
    Map<String, Map<String, dynamic>> allSections = {
      '‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô': {
        'title': 'üìû ‡∏™‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
        'calls': [
          CallItem('191', '‡∏ï‡πç‡∏≤‡∏£‡∏ß‡∏à', Icons.local_police),
          CallItem('1669', '‡∏Å‡∏π‡πâ‡∏ä‡∏µ‡∏û / ‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå', Icons.local_hospital),
          CallItem('199', '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏•‡∏¥‡∏á‡πÑ‡∏´‡∏°‡πâ', Icons.local_fire_department),
          CallItem('1418', '‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ò‡∏¥‡∏õ‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏Å‡∏ï‡∏∂‡πä‡∏á', Icons.volunteer_activism),
          CallItem('1646', '‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ò‡∏¥‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏ï‡∏±‡∏ç‡∏ç‡∏π', Icons.favorite),
        ],
      },
      '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': {
        'title': 'üè• ‡∏™‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç',
        'calls': [
          CallItem('1422', '‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ (‡∏™‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏™‡∏ò.)', Icons.medical_services),
          CallItem('1367', '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏û‡∏¥‡∏©‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤', Icons.warning),
          CallItem('1600', '‡∏™‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà', Icons.smoke_free),
          CallItem('1323', '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï (‡∏Å‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï)', Icons.psychology),
        ],
      },
      '‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß': {
        'title': 'üßí ‡πÄ‡∏î‡πá‡∏Å ‡∏™‡∏ï‡∏£‡∏µ ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡∏ä‡∏ô',
        'calls': [
          CallItem('1300', '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏±‡∏á‡∏Ñ‡∏° (‡∏´‡∏ç‡∏¥‡∏á-‡πÄ‡∏î‡πá‡∏Å-‡∏Ñ‡∏ô‡∏ä‡∏£‡∏≤)', Icons.family_restroom),
          CallItem('1387', '‡∏™‡∏≤‡∏¢‡πÉ‡∏¢‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß', Icons.groups),
          CallItem('0-2412-1196', '‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ò‡∏¥‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏û‡∏¥‡∏ó‡∏±‡∏Å‡∏©‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÄ‡∏î‡πá‡∏Å', Icons.child_care),
        ],
      },
      '‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á': {
        'title': 'üöó ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏£‡∏≤‡∏à‡∏£',
        'calls': [
          CallItem('1193', '‡∏ï‡πç‡∏≤‡∏£‡∏ß‡∏à‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á', Icons.local_police),
          CallItem('1543', '‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢', Icons.drive_eta),
          CallItem('1690', '‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡πÑ‡∏ü‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢', Icons.train),
          CallItem('1348', '‡∏Ç‡∏™‡∏°‡∏Å. (‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)', Icons.directions_bus),
        ],
      },
      '‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê': {
        'title': 'üíº ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê ‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        'calls': [
          CallItem('1548', '‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏ö‡∏±‡∏ï‡∏£ ‡∏õ‡∏ä‡∏ä., ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô)', Icons.badge),
          CallItem('1205', '‡∏õ.‡∏õ.‡∏ä. (‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏à‡∏£‡∏¥‡∏ï)', Icons.report_problem),
          CallItem('1111', '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•)', Icons.support_agent),
          CallItem('1567', '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏î‡πç‡∏≤‡∏£‡∏á‡∏ò‡∏£‡∏£‡∏°', Icons.balance),
        ],
      },
      '‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ': {
        'title': '‚ö° ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ',
        'calls': [
          CallItem('1129', '‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ô‡∏Ñ‡∏£‡∏´‡∏•‡∏ß‡∏á / ‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ', Icons.electrical_services),
          CallItem('1125', '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡∏ô‡∏Ñ‡∏£‡∏´‡∏•‡∏ß‡∏á', Icons.water_drop),
          CallItem('1662', '‡∏Å‡πä‡∏≤‡∏ã‡∏´‡∏∏‡∏á‡∏ï‡πâ‡∏° / ‡∏õ‡∏ï‡∏ó.', Icons.local_gas_station),
        ],
      },
    };

    // Filter by category
    if (_selectedCategory == '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
      allSections.forEach((category, data) {
        Widget section = _buildSection(
          title: data['title'],
          calls: data['calls'],
        );
        if (section is! SizedBox) {
          sections.add(section);
          sections.add(SizedBox(height: 20));
        }
      });
    } else {
      if (allSections.containsKey(_selectedCategory)) {
        var data = allSections[_selectedCategory]!;
        Widget section = _buildSection(
          title: data['title'],
          calls: data['calls'],
        );
        if (section is! SizedBox) {
          sections.add(section);
          sections.add(SizedBox(height: 20));
        }
      }
    }

    return sections;
  }

  Widget _buildSection({required String title, required List<CallItem> calls}) {
    // Filter calls based on search query
    List<CallItem> filteredCalls = calls.where((call) {
      if (_searchQuery.isEmpty) return true;
      return call.number.toLowerCase().contains(_searchQuery) ||
             call.description.toLowerCase().contains(_searchQuery);
    }).toList();

    // Don't show section if no calls match the search
    if (filteredCalls.isEmpty) {
      return SizedBox.shrink();
    }

    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: TextStyle(
              color: Color(0xFF8B4A9F),
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          SizedBox(height: 16),
          ...filteredCalls.map((call) => _buildCallButton(call)).toList(),
        ],
      ),
    );
  }

  Widget _buildCallButton(CallItem call) {
    return Container(
      margin: EdgeInsets.only(bottom: 12),
      child: InkWell(
        onTap: () => _makePhoneCall(call.number),
        borderRadius: BorderRadius.circular(12),
        child: Container(
          padding: EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Color(0xFF8B4A9F).withOpacity(0.05),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: Color(0xFF8B4A9F).withOpacity(0.2),
              width: 1,
            ),
          ),
          child: Row(
            children: [
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Color(0xFF8B4A9F),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  call.icon,
                  color: Colors.white,
                  size: 20,
                ),
              ),
              SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      call.number,
                      style: TextStyle(
                        color: Color(0xFF8B4A9F),
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 4),
                    Text(
                      call.description,
                      style: TextStyle(
                        color: Colors.black87,
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
              Icon(
                Icons.phone,
                color: Color(0xFF8B4A9F),
                size: 24,
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _makePhoneCall(String phoneNumber) async {
    final Uri launchUri = Uri(
      scheme: 'tel',
      path: phoneNumber,
    );
    
    try {
      if (await canLaunchUrl(launchUri)) {
        await launchUrl(launchUri);
      } else {
        print('Could not launch $phoneNumber');
      }
    } catch (e) {
      print('Error launching phone call: $e');
    }
  }
}

class CallItem {
  final String number;
  final String description;
  final IconData icon;

  CallItem(this.number, this.description, this.icon);
}